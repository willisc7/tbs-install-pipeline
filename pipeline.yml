# TODO:
# - make tbs_pipeline_tools_img in a sustainable way thats continuously 
#   patched and updated. Once we have that, we can eliminate all of the
#   messy apt and cert install lines.

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: build-service
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: build-service
    product_version: 1\..*\..*
- name: tbs-dependencies
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: tbs-dependencies
    product_version: .*

# TODO: whole block can be eliminated once tbs_pipeline_tools_img is made 
- name: kbld
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: kbld
    product_version: .*
- name: kapp
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: kapp
    product_version: .*
- name: ytt
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: ytt
    product_version: .*

- name: images-relocated
  type: s3
  source:
    disable_ssl: false
    access_key_id: ((aws_access_key_id))
    secret_access_key: ((aws_secret_access_key))
    endpoint: ((s3_endpoint))
    bucket: ((s3_bucket))
    region_name: ((aws_region))
    versioned_file: images-relocated.lock
params:
  harbor: &harbor
    HARBOR_HOSTNAME: ((harbor_hostname))
    HARBOR_URL: https://((harbor_hostname))
    HARBOR_USERNAME: ((harbor_username))
    HARBOR_PASSWORD: ((harbor_password))
    HARBOR_PROJECT: ((harbor_project))
    HARBOR_REPOSITORY: ((harbor_hostname))/((harbor_project))/build-service
  pivnet: &pivnet
    PIVNET_USERNAME: ((pivnet_username))
    PIVNET_PASSWORD:  ((pivnet_password))

jobs:
- name: relocate-images
  plan:
  - in_parallel:
    - get: build-service
      # Uncomment following line to have this pipeline run every time theres a new TBS version
      # trigger: true
      params:
        globs: ["*.tar"]
        unpack: true
    - get: kbld
  - task: kbld-relocate
    params:
      <<: *harbor
      <<: *pivnet
      CA_CERT: ((ca_cert))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((tbs_pipeline_tools_img))
      inputs:
      - name: build-service
      - name: kbld
      outputs:
      - name: out
      run:
        path: bash
        args:
        - -ce
        - |
          # Install docker and certs
          # TODO: whole block can be eliminated once tbs_pipeline_tools_img is made
          export DEBIAN_FRONTEND=noninteractive
          mkdir /etc/docker
          echo '{"insecure-registries" : ["((harbor_hostname))"]}' > /etc/docker/daemon.json
          apt-get update
          apt-get install -y\
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          echo "${CA_CERT}" > /usr/local/share/ca-certificates/ca_cert.crt
          update-ca-certificates
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          apt-get install -y docker-ce docker-ce-cli containerd.io
          install kbld/kbld-linux-* /usr/local/bin/kbld
          
          # Relocate TBS images to Harbor
          docker login registry.pivotal.io -u ${PIVNET_USERNAME} -p ${PIVNET_PASSWORD}
          docker login ${HARBOR_HOSTNAME} -u ${HARBOR_USERNAME} -p ${HARBOR_PASSWORD}
          kbld relocate -f build-service/images.lock --lock-output out/images-relocated.lock --repository ${HARBOR_REPOSITORY} --registry-ca-cert-path /usr/local/share/ca-certificates/ca_cert.crt
  - put: images-relocated
    params:
      file: out/images-relocated.lock
- name: deploy-tbs
  plan:
  - in_parallel:
    - get: build-service
      passed:
      - relocate-images
      params:
        globs: ["*.tar"]
        unpack: true
    - get: images-relocated
      passed:
      - relocate-images
      trigger: true
    - get: ytt
    - get: kbld
    - get: kapp
  - task: kapp-deploy
    params:
      <<: *harbor
      KUBECONFIG_VALUE: ((kubeconfig))
      CA_CERT: ((ca_cert))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((tbs_pipeline_tools_img))
      inputs:
      - name: build-service
      - name: images-relocated
      - name: ytt
      - name: kbld
      - name: kapp
      run:
        path: bash
        args:
        - -cex
        - |
          # TODO: whole block can be eliminated once tbs_pipeline_tools_img is made
          install ytt/ytt-linux-* /usr/local/bin/ytt
          install kbld/kbld-linux-* /usr/local/bin/kbld
          install kapp/kapp-linux-* /usr/local/bin/kapp
          export DEBIAN_FRONTEND=noninteractive
          mkdir /etc/docker
          echo '{"insecure-registries" : ["((harbor_hostname))"]}' > /etc/docker/daemon.json
          apt-get update
          apt-get install -y\
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          echo "${CA_CERT}" > /usr/local/share/ca-certificates/ca_cert.crt
          update-ca-certificates

          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          ${KUBECONFIG_VALUE}
          EOF
          ytt -f build-service/values.yaml \
              -f build-service/manifests/ \
              -f /usr/local/share/ca-certificates/ca_cert.crt \
              -v docker_repository="${HARBOR_REPOSITORY}" \
              -v docker_username="${HARBOR_USERNAME}" \
              -v docker_password="${HARBOR_PASSWORD}" \
              | kbld -f images-relocated/images-relocated.lock -f- \
              | kapp deploy -a tanzu-build-service -f- -y
- name: kp-import
  plan:
  - in_parallel:
    - get: kp
      resource: build-service
      params:
        globs: ["kp-linux-*"]
      passed:
      - deploy-tbs
    - get: tbs-dependencies
    - get: images-relocated
      passed:
      - deploy-tbs
      trigger: true
  - task: kp-import
    params:
      <<: *harbor
      <<: *pivnet
      KUBECONFIG_VALUE: ((kubeconfig))
      CA_CERT: ((ca_cert))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((tbs_pipeline_tools_img))
      inputs:
      - name: kp
      - name: tbs-dependencies
      run:
        path: bash
        args:
        - -cex
        - |
          # Install docker and certs
          # TODO: whole block can be eliminated once tbs_pipeline_tools_img is made
          export DEBIAN_FRONTEND=noninteractive
          mkdir /etc/docker
          echo '{"insecure-registries" : ["((harbor_hostname))"]}' > /etc/docker/daemon.json
          apt-get update
          apt-get install -y\
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          echo "${CA_CERT}" > /usr/local/share/ca-certificates/ca_cert.crt
          update-ca-certificates
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          apt-get install -y docker-ce docker-ce-cli containerd.io
          install kp/kp-linux-* /usr/local/bin/kp
          echo "${CA_CERT}" > /usr/local/share/ca-certificates/ca_cert.crt
          update-ca-certificates

          # Download latest buildpacks and stacks from TanzuNet
          mkdir -p ~/.kube
          cat <<EOF > ~/.kube/config
          ${KUBECONFIG_VALUE}
          EOF
          docker login registry.pivotal.io -u ${PIVNET_USERNAME} -p ${PIVNET_PASSWORD}
          docker login ${HARBOR_HOSTNAME} -u ${HARBOR_USERNAME} -p ${HARBOR_PASSWORD}
          kp import -f ./tbs-dependencies/descriptor-*.yaml